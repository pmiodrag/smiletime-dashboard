var express = require('express');
var path = require('path');
var port = process.env.PORT || 3000;
var app = express();
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
app.use('/assets', express.static(path.resolve(__dirname, 'assets')));
app.use('/styles', express.static(path.resolve(__dirname, 'styles')));
app.use('/fonts', express.static(path.resolve(__dirname, 'assets/fonts')));
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});
var mysql = require('mysql'); // node-mysql module
var connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'smiletime'
});
connection.connect();
var getPacients = function (req, res) {
    console.log("getPacients");
    connection.query("SELECT * from patient", function (err, rows) {
        if (err) {
            console.log("Problem with MySQL" + err);
            res.send(path.resolve(__dirname, 'pacients.json'));
        }
        else {
            console.log('The solution is: ', rows[0]);
            res.send(JSON.stringify(rows));
        }
    });
};
app.get('/getPacients', getPacients);
var selectTreatments = function (req, res) {
    console.log("selectTreatments");
    connection.query("SELECT * from treatment", function (err, rows) {
        if (err) {
            console.log("Problem with MySQL" + err);
            res.send(path.resolve(__dirname, 'orders.json'));
        }
        else {
            console.log('The solution is: ', rows[0]);
            res.send(JSON.stringify(rows));
        }
    });
};
app.get('/selectTreatments', selectTreatments);
var renderIndex = function (req, res) {
    console.log("renderIndex __dirname", __dirname);
    res.sendFile(path.resolve(__dirname, 'index.html'));
};
app.get('/*', renderIndex);
//connection.end(); 

//# sourceMappingURL=data:application/json;base64,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cmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHBvcnQ6IG51bWJlciA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcbnZhciBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoJy9hcHAnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXBwJykpKTtcbmFwcC51c2UoJy9saWJzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2xpYnMnKSkpO1xuYXBwLnVzZSgnL2Fzc2V0cycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdhc3NldHMnKSkpO1xuYXBwLnVzZSgnL3N0eWxlcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdzdHlsZXMnKSkpO1xuYXBwLnVzZSgnL2ZvbnRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2Fzc2V0cy9mb250cycpKSk7XG5cbnZhciBzZXJ2ZXIgPSBhcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBob3N0ID0gc2VydmVyLmFkZHJlc3MoKS5hZGRyZXNzO1xuICAgIHZhciBwb3J0ID0gc2VydmVyLmFkZHJlc3MoKS5wb3J0O1xuICAgIGNvbnNvbGUubG9nKCdUaGlzIGV4cHJlc3MgYXBwIGlzIGxpc3RlbmluZyBvbiBwb3J0OicgKyBwb3J0KTtcbn0pO1xuXG52YXIgbXlzcWwgPSByZXF1aXJlKCdteXNxbCcpOyAvLyBub2RlLW15c3FsIG1vZHVsZVxudmFyIGNvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcbiAgaG9zdCAgICAgOiAnbG9jYWxob3N0JyxcbiAgdXNlciAgICAgOiAncm9vdCcsXG4gIHBhc3N3b3JkIDogJ3Jvb3QnLFxuICBkYXRhYmFzZSA6ICdzbWlsZXRpbWUnXG59KTtcblxuY29ubmVjdGlvbi5jb25uZWN0KCk7XG5cbnZhciBnZXRQYWNpZW50cyA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XG4gICBjb25zb2xlLmxvZyhcImdldFBhY2llbnRzXCIpXG4gICBjb25uZWN0aW9uLnF1ZXJ5KFwiU0VMRUNUICogZnJvbSBwYXRpZW50XCIsZnVuY3Rpb24oZXJyLHJvd3Mpe1xuICAgIGlmKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlByb2JsZW0gd2l0aCBNeVNRTFwiK2Vycik7XG4gICAgICAgIHJlcy5zZW5kKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdwYWNpZW50cy5qc29uJykpO1xuICAgIH0gZWxzZSB7XG4gICAgIGNvbnNvbGUubG9nKCdUaGUgc29sdXRpb24gaXM6ICcsIHJvd3NbMF0pOyAgICAgICAgXG4gICAgICAgIHJlcy5zZW5kKEpTT04uc3RyaW5naWZ5KHJvd3MpKTtcbiAgICB9XG4gICB9KTtcbn1cbmFwcC5nZXQoJy9nZXRQYWNpZW50cycsIGdldFBhY2llbnRzKTtcblxudmFyIHNlbGVjdFRyZWF0bWVudHMgPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwic2VsZWN0VHJlYXRtZW50c1wiKVxuICAgIGNvbm5lY3Rpb24ucXVlcnkoXCJTRUxFQ1QgKiBmcm9tIHRyZWF0bWVudFwiLGZ1bmN0aW9uKGVycixyb3dzKXtcbiAgICBpZihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQcm9ibGVtIHdpdGggTXlTUUxcIitlcnIpO1xuICAgICAgICByZXMuc2VuZChwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnb3JkZXJzLmpzb24nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgY29uc29sZS5sb2coJ1RoZSBzb2x1dGlvbiBpczogJywgcm93c1swXSk7ICAgICAgICBcbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkocm93cykpO1xuICAgIH1cbiAgfSk7XG59XG5hcHAuZ2V0KCcvc2VsZWN0VHJlYXRtZW50cycsIHNlbGVjdFRyZWF0bWVudHMpO1xudmFyIHJlbmRlckluZGV4ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcInJlbmRlckluZGV4IF9fZGlybmFtZVwiLCBfX2Rpcm5hbWUpXG4gICAgcmVzLnNlbmRGaWxlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdpbmRleC5odG1sJykpO1xufVxuYXBwLmdldCgnLyonLCByZW5kZXJJbmRleCk7XG4vL2Nvbm5lY3Rpb24uZW5kKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
